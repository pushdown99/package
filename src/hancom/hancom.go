package main

import (
	"C"
	"bytes"
	"context"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/getlantern/systray"
	"github.com/gorilla/websocket"
	"github.com/jacobsa/go-serial/serial"
	"github.com/jasonlvhit/gocron"
	"github.com/joho/godotenv"
	"github.com/kardianos/service"
	"github.com/zserge/webview"
) 


var version = ""
var build   = ""

var httpHost      string
var wsHost        string
var rcnNum        string
var macAddr       string
var ipAddr        string
var license       string
var postReceipt   string
var postLicense   string
var wsReceipt     string
var Printer       string
var Port1         string
var Port2         string
var heartBeat     string
var wsConnected   int = 0
var httpConnected int = 0

var logger service.Logger
//var w webview.WebView

var Icon []byte = []byte{
   0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x20, 0x00, 0x00, 0x01, 0x00,
   0x20, 0x00, 0xa8, 0x10, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00,
   0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00,
   0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
   0xff, 0xff, 0xf5, 0xfb, 0xfb, 0xff, 0xb1, 0xdc, 0xf7, 0xff, 0x65, 0xba,
   0xf8, 0xff, 0x37, 0xa5, 0xf7, 0xff, 0x29, 0x9d, 0xfa, 0xff, 0x34, 0xa5,
   0xf6, 0xff, 0x60, 0xb8, 0xf8, 0xff, 0xa8, 0xda, 0xf7, 0xff, 0xf3, 0xfa,
   0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xfc, 0xfb, 0xfa, 0xff, 0xf9, 0xf9,
   0xfa, 0xff, 0xf3, 0xf1, 0xf8, 0xff, 0xf1, 0xef, 0xf8, 0xff, 0xf4, 0xf2,
   0xf9, 0xff, 0xfb, 0xfa, 0xf9, 0xff, 0xfc, 0xfc, 0xfb, 0xff, 0xfe, 0xfe,
   0xfd, 0xff, 0xfd, 0xfe, 0xfe, 0xff, 0xd2, 0xe9, 0xf9, 0xff, 0x4b, 0xaa,
   0xf7, 0xff, 0x21, 0x91, 0xf7, 0xff, 0x20, 0x8f, 0xf6, 0xff, 0x1f, 0x90,
   0xf7, 0xff, 0x1f, 0x92, 0xf7, 0xff, 0x1e, 0x93, 0xf5, 0xff, 0x1e, 0x95,
   0xf7, 0xff, 0x1d, 0x97, 0xf8, 0xff, 0x3f, 0xab, 0xf7, 0xff, 0xc8, 0xe6,
   0xf9, 0xff, 0xfc, 0xfd, 0xfc, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe,
   0xfe, 0xff, 0xfd, 0xfd, 0xfd, 0xff, 0xfb, 0xfa, 0xfb, 0xff, 0xc5, 0xbc,
   0xf0, 0xff, 0x85, 0x71, 0xdc, 0xff, 0x5e, 0x41, 0xce, 0xff, 0x50, 0x30,
   0xc5, 0xff, 0x50, 0x2d, 0xc0, 0xff, 0x57, 0x34, 0xbe, 0xff, 0x6c, 0x4b,
   0xc4, 0xff, 0x92, 0x79, 0xd1, 0xff, 0xc4, 0xb8, 0xe4, 0xff, 0xb8, 0xd6,
   0xf7, 0xff, 0x2c, 0x92, 0xf6, 0xff, 0x21, 0x88, 0xf5, 0xff, 0x21, 0x87,
   0xf5, 0xff, 0x21, 0x87, 0xf5, 0xff, 0x21, 0x89, 0xf6, 0xff, 0x20, 0x8b,
   0xf5, 0xff, 0x20, 0x8d, 0xf6, 0xff, 0x20, 0x90, 0xf7, 0xff, 0x20, 0x92,
   0xf7, 0xff, 0x1e, 0x96, 0xf6, 0xff, 0x24, 0x9d, 0xf8, 0xff, 0xb1, 0xdd,
   0xfa, 0xff, 0xfb, 0xfd, 0xfc, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xfe, 0xfd, 0xff, 0xda, 0xd5,
   0xf4, 0xff, 0x6b, 0x55, 0xda, 0xff, 0x48, 0x2b, 0xca, 0xff, 0x4d, 0x2d,
   0xc3, 0xff, 0x54, 0x2e, 0xbe, 0xff, 0x56, 0x30, 0xb7, 0xff, 0x5b, 0x31,
   0xb1, 0xff, 0x5d, 0x32, 0xad, 0xff, 0x5f, 0x33, 0xaa, 0xff, 0x61, 0x33,
   0xa8, 0xff, 0x63, 0x34, 0xa8, 0xff, 0x5d, 0x3a, 0xae, 0xff, 0x45, 0x5a,
   0xcd, 0xff, 0x29, 0x79, 0xee, 0xff, 0x22, 0x7f, 0xf5, 0xff, 0x22, 0x80,
   0xf5, 0xff, 0x22, 0x82, 0xf5, 0xff, 0x21, 0x84, 0xf5, 0xff, 0x22, 0x86,
   0xf7, 0xff, 0x21, 0x8a, 0xf7, 0xff, 0x21, 0x8e, 0xf7, 0xff, 0x20, 0x91,
   0xf8, 0xff, 0x1e, 0x95, 0xf6, 0xff, 0x25, 0x9c, 0xf6, 0xff, 0xc5, 0xe6,
   0xfa, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfd,
   0xfb, 0xff, 0xbe, 0xb6, 0xee, 0xff, 0x4c, 0x32, 0xd1, 0xff, 0x49, 0x2b,
   0xc8, 0xff, 0x4f, 0x2e, 0xc1, 0xff, 0x54, 0x2f, 0xba, 0xff, 0x59, 0x31,
   0xb3, 0xff, 0x5e, 0x32, 0xae, 0xff, 0x61, 0x33, 0xa9, 0xff, 0x66, 0x34,
   0xa4, 0xff, 0x68, 0x36, 0x9f, 0xff, 0x6b, 0x38, 0x9a, 0xff, 0x6c, 0x38,
   0x98, 0xff, 0x6e, 0x38, 0x97, 0xff, 0x70, 0x37, 0x97, 0xff, 0x67, 0x3a,
   0x9f, 0xff, 0x46, 0x58, 0xc7, 0xff, 0x27, 0x76, 0xf0, 0xff, 0x23, 0x7c,
   0xf3, 0xff, 0x22, 0x7f, 0xf5, 0xff, 0x22, 0x82, 0xf6, 0xff, 0x21, 0x85,
   0xf6, 0xff, 0x20, 0x89, 0xf5, 0xff, 0x21, 0x8e, 0xf7, 0xff, 0x20, 0x91,
   0xf7, 0xff, 0x1f, 0x96, 0xf9, 0xff, 0x3d, 0xa9, 0xf8, 0xff, 0xf4, 0xf9,
   0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfc, 0xfc, 0xfb, 0xff, 0xc4, 0xbb, 0xef, 0xff, 0x45, 0x2d,
   0xd2, 0xff, 0x48, 0x2b, 0xc9, 0xff, 0x4f, 0x2d, 0xc1, 0xff, 0x55, 0x30,
   0xb9, 0xff, 0x5a, 0x31, 0xb2, 0xff, 0x5e, 0x33, 0xab, 0xff, 0x63, 0x34,
   0xa6, 0xff, 0x67, 0x36, 0xa1, 0xff, 0x6c, 0x38, 0x9c, 0xff, 0x70, 0x38,
   0x97, 0xff, 0x74, 0x38, 0x92, 0xff, 0x75, 0x3a, 0x8d, 0xff, 0x77, 0x3a,
   0x8b, 0xff, 0x79, 0x3a, 0x89, 0xff, 0x78, 0x3b, 0x88, 0xff, 0x78, 0x39,
   0x89, 0xff, 0x6a, 0x42, 0x9a, 0xff, 0x3a, 0x67, 0xd8, 0xff, 0x24, 0x79,
   0xf5, 0xff, 0x21, 0x7e, 0xf5, 0xff, 0x23, 0x82, 0xf5, 0xff, 0x23, 0x85,
   0xf6, 0xff, 0x20, 0x8a, 0xf7, 0xff, 0x21, 0x8e, 0xf7, 0xff, 0x20, 0x92,
   0xf8, 0xff, 0x1d, 0x97, 0xf7, 0xff, 0x94, 0xcf, 0xf9, 0xff, 0xfd, 0xfe,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xff, 0xe3, 0xdf,
   0xf6, 0xff, 0x4c, 0x33, 0xd7, 0xff, 0x47, 0x2a, 0xcc, 0xff, 0x4d, 0x2d,
   0xc4, 0xff, 0x53, 0x2f, 0xbc, 0xff, 0x59, 0x31, 0xb4, 0xff, 0x60, 0x32,
   0xad, 0xff, 0x62, 0x34, 0xa6, 0xff, 0x68, 0x37, 0x9e, 0xff, 0x6c, 0x38,
   0x99, 0xff, 0x71, 0x38, 0x95, 0xff, 0x75, 0x39, 0x8f, 0xff, 0x79, 0x3a,
   0x89, 0xff, 0x7b, 0x3b, 0x84, 0xff, 0x7d, 0x3a, 0x81, 0xff, 0x82, 0x3b,
   0x7e, 0xff, 0x81, 0x3c, 0x7b, 0xff, 0x81, 0x3b, 0x79, 0xff, 0x81, 0x3b,
   0x7a, 0xff, 0x81, 0x3c, 0x7e, 0xff, 0x58, 0x53, 0xb0, 0xff, 0x25, 0x78,
   0xef, 0xff, 0x21, 0x7f, 0xf4, 0xff, 0x23, 0x82, 0xf4, 0xff, 0x23, 0x86,
   0xf6, 0xff, 0x20, 0x8b, 0xf5, 0xff, 0x1f, 0x8f, 0xf6, 0xff, 0x1e, 0x95,
   0xf6, 0xff, 0x34, 0xa4, 0xf7, 0xff, 0xf7, 0xfb, 0xfd, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfa, 0xfb, 0xf9, 0xff, 0x74, 0x64, 0xe1, 0xff, 0x43, 0x28,
   0xcf, 0xff, 0x4b, 0x2c, 0xc6, 0xff, 0x51, 0x2e, 0xbf, 0xff, 0x56, 0x30,
   0xb6, 0xff, 0x5c, 0x32, 0xaf, 0xff, 0x63, 0x33, 0xa8, 0xff, 0x67, 0x37,
   0xa0, 0xff, 0x6c, 0x38, 0x98, 0xff, 0x71, 0x38, 0x92, 0xff, 0x76, 0x39,
   0x8e, 0xff, 0x7b, 0x3a, 0x88, 0xff, 0x7d, 0x3a, 0x82, 0xff, 0x81, 0x3a,
   0x7d, 0xff, 0x83, 0x3b, 0x78, 0xff, 0x87, 0x3d, 0x74, 0xff, 0x89, 0x3d,
   0x70, 0xff, 0x8a, 0x3d, 0x6d, 0xff, 0x8c, 0x3e, 0x6c, 0xff, 0x8d, 0x3d,
   0x6d, 0xff, 0x8c, 0x3d, 0x6e, 0xff, 0x73, 0x47, 0x8d, 0xff, 0x32, 0x72,
   0xe1, 0xff, 0x22, 0x80, 0xf4, 0xff, 0x24, 0x84, 0xf6, 0xff, 0x20, 0x87,
   0xf5, 0xff, 0x20, 0x8c, 0xf5, 0xff, 0x20, 0x93, 0xf7, 0xff, 0x1e, 0x98,
   0xf7, 0xff, 0xc1, 0xe5, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcd, 0xc7,
   0xf3, 0xff, 0x3e, 0x26, 0xd3, 0xff, 0x47, 0x29, 0xcb, 0xff, 0x4f, 0x2c,
   0xc4, 0xff, 0x54, 0x2f, 0xba, 0xff, 0x59, 0x31, 0xb2, 0xff, 0x60, 0x33,
   0xaa, 0xff, 0x66, 0x35, 0xa3, 0xff, 0x6b, 0x37, 0x9b, 0xff, 0x70, 0x38,
   0x94, 0xff, 0x75, 0x39, 0x8d, 0xff, 0x7b, 0x3a, 0x88, 0xff, 0x7e, 0x3b,
   0x81, 0xff, 0x82, 0x3c, 0x7b, 0xff, 0x87, 0x3d, 0x75, 0xff, 0x8a, 0x3c,
   0x71, 0xff, 0x8e, 0x3d, 0x6b, 0xff, 0x90, 0x3e, 0x65, 0xff, 0x94, 0x3f,
   0x60, 0xff, 0x96, 0x40, 0x5d, 0xff, 0x97, 0x40, 0x5d, 0xff, 0x97, 0x40,
   0x5d, 0xff, 0x95, 0x3f, 0x5d, 0xff, 0x8b, 0x41, 0x6c, 0xff, 0x42, 0x6a,
   0xcb, 0xff, 0x22, 0x80, 0xf3, 0xff, 0x22, 0x85, 0xf7, 0xff, 0x21, 0x8a,
   0xf7, 0xff, 0x20, 0x90, 0xf7, 0xff, 0x1e, 0x95, 0xf6, 0xff, 0x86, 0xc9,
   0xf8, 0xff, 0xfd, 0xfe, 0xfc, 0xff, 0x76, 0x68, 0xe3, 0xff, 0x41, 0x26,
   0xd0, 0xff, 0x49, 0x2b, 0xc7, 0xff, 0x51, 0x2d, 0xc0, 0xff, 0x56, 0x30,
   0xb6, 0xff, 0x5d, 0x32, 0xaf, 0xff, 0x65, 0x34, 0xa6, 0xff, 0x6a, 0x36,
   0x9e, 0xff, 0x6e, 0x38, 0x97, 0xff, 0x74, 0x39, 0x90, 0xff, 0x7a, 0x3a,
   0x89, 0xff, 0x7f, 0x3b, 0x82, 0xff, 0x83, 0x3c, 0x7c, 0xff, 0x87, 0x3d,
   0x75, 0xff, 0x8b, 0x3d, 0x6d, 0xff, 0x8f, 0x3e, 0x66, 0xff, 0x93, 0x3e,
   0x62, 0xff, 0x98, 0x3f, 0x5b, 0xff, 0x99, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x55, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x56, 0xff, 0x99, 0x40, 0x57, 0xff, 0x95, 0x41, 0x5b, 0xff, 0x57, 0x63,
   0xaf, 0xff, 0x22, 0x82, 0xf4, 0xff, 0x21, 0x88, 0xf5, 0xff, 0x20, 0x8e,
   0xf6, 0xff, 0x1e, 0x94, 0xf7, 0xff, 0x59, 0xb5, 0xf8, 0xff, 0xec, 0xed,
   0xf8, 0xff, 0x43, 0x2a, 0xd8, 0xff, 0x42, 0x27, 0xcf, 0xff, 0x4a, 0x2c,
   0xc5, 0xff, 0x52, 0x2e, 0xbd, 0xff, 0x58, 0x32, 0xb2, 0xff, 0x5e, 0x33,
   0xab, 0xff, 0x66, 0x35, 0xa2, 0xff, 0x6b, 0x38, 0x9a, 0xff, 0x72, 0x39,
   0x93, 0xff, 0x78, 0x3a, 0x8c, 0xff, 0x7e, 0x3b, 0x85, 0xff, 0x83, 0x3c,
   0x7d, 0xff, 0x87, 0x3c, 0x76, 0xff, 0x8b, 0x3c, 0x6d, 0xff, 0x90, 0x3d,
   0x65, 0xff, 0x95, 0x3f, 0x60, 0xff, 0x97, 0x40, 0x59, 0xff, 0x99, 0x40,
   0x58, 0xff, 0x99, 0x40, 0x57, 0xff, 0x99, 0x40, 0x57, 0xff, 0x99, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x99, 0x40,
   0x57, 0xff, 0x99, 0x40, 0x57, 0xff, 0x97, 0x40, 0x56, 0xff, 0x66, 0x5d,
   0x9b, 0xff, 0x23, 0x86, 0xf1, 0xff, 0x20, 0x8d, 0xf6, 0xff, 0x1f, 0x94,
   0xf8, 0xff, 0x41, 0xa9, 0xf9, 0xff, 0xba, 0xb3, 0xf1, 0xff, 0x3e, 0x25,
   0xd5, 0xff, 0x45, 0x29, 0xcd, 0xff, 0x64, 0x4a, 0xcb, 0xff, 0x8f, 0x77,
   0xd2, 0xff, 0x95, 0x7a, 0xcb, 0xff, 0x99, 0x7b, 0xc6, 0xff, 0x8d, 0x67,
   0xb6, 0xff, 0x6e, 0x37, 0x97, 0xff, 0x73, 0x39, 0x90, 0xff, 0x7a, 0x3b,
   0x88, 0xff, 0xa8, 0x7d, 0xaa, 0xff, 0xc7, 0xad, 0xc5, 0xff, 0xa2, 0x68,
   0x90, 0xff, 0x8e, 0x3e, 0x68, 0xff, 0x94, 0x3f, 0x60, 0xff, 0x99, 0x41,
   0x58, 0xff, 0xb0, 0x6b, 0x7c, 0xff, 0xbc, 0x82, 0x90, 0xff, 0xbc, 0x82,
   0x90, 0xff, 0xbb, 0x82, 0x90, 0xff, 0xa8, 0x5b, 0x6f, 0xff, 0x99, 0x40,
   0x57, 0xff, 0x99, 0x40, 0x57, 0xff, 0x9b, 0x45, 0x5a, 0xff, 0xc5, 0x97,
   0xa3, 0xff, 0xcf, 0xa9, 0xb2, 0xff, 0xa4, 0x55, 0x6a, 0xff, 0x6b, 0x5b,
   0x91, 0xff, 0x21, 0x8c, 0xf2, 0xff, 0x1f, 0x93, 0xf6, 0xff, 0x34, 0xa4,
   0xf9, 0xff, 0x8e, 0x83, 0xea, 0xff, 0x3e, 0x24, 0xd5, 0xff, 0x47, 0x2a,
   0xcc, 0xff, 0xde, 0xd9, 0xf1, 0xff, 0xc4, 0xb7, 0xe6, 0xff, 0xc6, 0xb8,
   0xe3, 0xff, 0xc8, 0xb8, 0xdf, 0xff, 0xb4, 0x9a, 0xcb, 0xff, 0x70, 0x38,
   0x95, 0xff, 0x77, 0x3a, 0x8b, 0xff, 0xa0, 0x72, 0xa6, 0xff, 0xe7, 0xdd,
   0xe7, 0xff, 0xbf, 0x9c, 0xb6, 0xff, 0xed, 0xe5, 0xeb, 0xff, 0xa1, 0x57,
   0x75, 0xff, 0x98, 0x40, 0x5a, 0xff, 0xa8, 0x5c, 0x6f, 0xff, 0xec, 0xe1,
   0xe5, 0xff, 0xd9, 0xbd, 0xc5, 0xff, 0xd9, 0xbd, 0xc5, 0xff, 0xd9, 0xbc,
   0xc5, 0xff, 0xb8, 0x7d, 0x8d, 0xff, 0x99, 0x40, 0x56, 0xff, 0x9a, 0x3f,
   0x56, 0xff, 0xd0, 0xa6, 0xb0, 0xff, 0xdd, 0xc6, 0xcd, 0xff, 0xcf, 0xaa,
   0xb3, 0xff, 0xe7, 0xd6, 0xdc, 0xff, 0x9b, 0x41, 0x59, 0xff, 0x59, 0x69,
   0xac, 0xff, 0x20, 0x92, 0xf7, 0xff, 0x3b, 0xa6, 0xf8, 0xff, 0x6c, 0x5e,
   0xe7, 0xff, 0x3f, 0x26, 0xd4, 0xff, 0x48, 0x2b, 0xcd, 0xff, 0xde, 0xd9,
   0xf1, 0xff, 0xbf, 0xb1, 0xe4, 0xff, 0xc2, 0xb4, 0xe1, 0xff, 0xc4, 0xb3,
   0xdc, 0xff, 0x8b, 0x63, 0xaf, 0xff, 0x71, 0x38, 0x94, 0xff, 0x79, 0x3b,
   0x8a, 0xff, 0xc9, 0xb1, 0xcd, 0xff, 0xa6, 0x74, 0x9c, 0xff, 0x89, 0x3b,
   0x6e, 0xff, 0xc1, 0x99, 0xae, 0xff, 0xc1, 0x8e, 0x9d, 0xff, 0x9b, 0x40,
   0x57, 0xff, 0xa8, 0x5d, 0x71, 0xff, 0xea, 0xde, 0xe2, 0xff, 0xd7, 0xb9,
   0xc2, 0xff, 0xd7, 0xb9, 0xc2, 0xff, 0xd4, 0xb1, 0xbb, 0xff, 0xa1, 0x50,
   0x64, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x41, 0x57, 0xff, 0xeb, 0xde,
   0xe3, 0xff, 0x9c, 0x4a, 0x60, 0xff, 0x99, 0x40, 0x57, 0xff, 0xe1, 0xcb,
   0xd1, 0xff, 0xa9, 0x5d, 0x71, 0xff, 0x95, 0x42, 0x5b, 0xff, 0x31, 0x86,
   0xdd, 0xff, 0x4f, 0xaf, 0xf8, 0xff, 0x57, 0x47, 0xe4, 0xff, 0x3e, 0x25,
   0xd5, 0xff, 0x46, 0x29, 0xcb, 0xff, 0x71, 0x57, 0xcf, 0xff, 0x9d, 0x89,
   0xd6, 0xff, 0xa3, 0x8b, 0xd0, 0xff, 0xb0, 0x9a, 0xd2, 0xff, 0xd2, 0xc1,
   0xdd, 0xff, 0x72, 0x38, 0x90, 0xff, 0x7a, 0x3b, 0x88, 0xff, 0xc9, 0xae,
   0xcd, 0xff, 0xae, 0x7a, 0xa0, 0xff, 0x8b, 0x3e, 0x6c, 0xff, 0xc7, 0xa0,
   0xb1, 0xff, 0xbf, 0x8a, 0x98, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9b, 0x40,
   0x57, 0xff, 0xb5, 0x7b, 0x89, 0xff, 0xc4, 0x91, 0x9d, 0xff, 0xc4, 0x91,
   0x9d, 0xff, 0xd7, 0xbb, 0xc2, 0xff, 0xc3, 0x93, 0xa1, 0xff, 0x9b, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0xea, 0xdc, 0xe0, 0xff, 0xa1, 0x50,
   0x63, 0xff, 0x9a, 0x41, 0x57, 0xff, 0xe2, 0xd0, 0xd5, 0xff, 0xa8, 0x5b,
   0x70, 0xff, 0x99, 0x40, 0x57, 0xff, 0x6e, 0x5f, 0x90, 0xff, 0x72, 0xc1,
   0xf9, 0xff, 0x4b, 0x3a, 0xe4, 0xff, 0x3e, 0x25, 0xd5, 0xff, 0x45, 0x29,
   0xcb, 0xff, 0xb1, 0xa7, 0xe2, 0xff, 0xf8, 0xf7, 0xfa, 0xff, 0xf9, 0xf8,
   0xfb, 0xff, 0xfa, 0xf7, 0xfa, 0xff, 0xad, 0x92, 0xc4, 0xff, 0x72, 0x38,
   0x90, 0xff, 0x96, 0x64, 0xa1, 0xff, 0xd5, 0xc2, 0xd5, 0xff, 0xf0, 0xe9,
   0xee, 0xff, 0xcf, 0xb2, 0xc2, 0xff, 0xef, 0xe6, 0xe9, 0xff, 0xa2, 0x51,
   0x66, 0xff, 0x9a, 0x3f, 0x56, 0xff, 0x9a, 0x41, 0x58, 0xff, 0xe9, 0xdc,
   0xe1, 0xff, 0xf8, 0xf9, 0xfa, 0xff, 0xf7, 0xf9, 0xfa, 0xff, 0xf4, 0xf1,
   0xf4, 0xff, 0xb1, 0x6d, 0x7f, 0xff, 0x99, 0x3e, 0x55, 0xff, 0xba, 0x82,
   0x90, 0xff, 0xe8, 0xdb, 0xe0, 0xff, 0xe7, 0xd8, 0xdc, 0xff, 0xda, 0xc0,
   0xc7, 0xff, 0xe1, 0xcc, 0xd3, 0xff, 0x99, 0x41, 0x58, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x95, 0x42, 0x5b, 0xff, 0xb3, 0xd2, 0xee, 0xff, 0x4b, 0x38,
   0xe6, 0xff, 0x3c, 0x25, 0xd6, 0xff, 0x66, 0x4e, 0xd6, 0xff, 0xb0, 0xa2,
   0xe3, 0xff, 0xb7, 0xa7, 0xdf, 0xff, 0x95, 0x7a, 0xca, 0xff, 0x76, 0x4f,
   0xb0, 0xff, 0x95, 0x70, 0xb6, 0xff, 0x72, 0x39, 0x91, 0xff, 0xe5, 0xda,
   0xe6, 0xff, 0xc0, 0x9f, 0xbd, 0xff, 0xbf, 0x98, 0xb4, 0xff, 0xc3, 0x98,
   0xac, 0xff, 0xba, 0x84, 0x94, 0xff, 0xcd, 0xa8, 0xb2, 0xff, 0xaf, 0x6b,
   0x7c, 0xff, 0xb8, 0x7b, 0x8a, 0xff, 0xd0, 0xac, 0xb7, 0xff, 0xd1, 0xad,
   0xb6, 0xff, 0xae, 0x6a, 0x79, 0xff, 0xb0, 0x70, 0x81, 0xff, 0xa8, 0x5c,
   0x70, 0xff, 0xa6, 0x58, 0x6b, 0xff, 0xec, 0xe2, 0xe6, 0xff, 0xc8, 0x9c,
   0xa7, 0xff, 0xc9, 0x9c, 0xa7, 0xff, 0xc3, 0x91, 0x9f, 0xff, 0xbe, 0x8b,
   0x99, 0xff, 0xcf, 0xa8, 0xb2, 0xff, 0xa3, 0x51, 0x66, 0xff, 0x9a, 0x41,
   0x55, 0xff, 0xd8, 0xb6, 0xbf, 0xff, 0x54, 0x44, 0xe8, 0xff, 0x3a, 0x24,
   0xd9, 0xff, 0xb6, 0xab, 0xeb, 0xff, 0xbe, 0xb1, 0xe9, 0xff, 0xa6, 0x97,
   0xdd, 0xff, 0xea, 0xe4, 0xf1, 0xff, 0x91, 0x71, 0xc3, 0xff, 0xca, 0xb7,
   0xd7, 0xff, 0x72, 0x39, 0x91, 0xff, 0xe5, 0xdb, 0xe7, 0xff, 0xb7, 0x92,
   0xb3, 0xff, 0xb7, 0x8a, 0xa8, 0xff, 0x9d, 0x50, 0x70, 0xff, 0xd8, 0xc0,
   0xc9, 0xff, 0xd8, 0xb8, 0xbf, 0xff, 0xac, 0x66, 0x79, 0xff, 0xec, 0xe2,
   0xe6, 0xff, 0xcb, 0xa0, 0xab, 0xff, 0xd6, 0xb6, 0xbf, 0xff, 0xd9, 0xbc,
   0xc5, 0xff, 0xcc, 0xa6, 0xb0, 0xff, 0xbf, 0x85, 0x94, 0xff, 0xa6, 0x5a,
   0x6d, 0xff, 0xea, 0xde, 0xe2, 0xff, 0xc0, 0x8e, 0x9a, 0xff, 0xbc, 0x86,
   0x93, 0xff, 0x9c, 0x46, 0x5c, 0xff, 0xef, 0xe9, 0xed, 0xff, 0xcb, 0xa1,
   0xac, 0xff, 0xa0, 0x4e, 0x63, 0xff, 0x98, 0x40, 0x56, 0xff, 0xbe, 0x89,
   0x96, 0xff, 0x68, 0x5b, 0xec, 0xff, 0x37, 0x23, 0xdd, 0xff, 0xb9, 0xb2,
   0xef, 0xff, 0x7e, 0x6a, 0xd8, 0xff, 0x55, 0x31, 0xc2, 0xff, 0xe9, 0xe4,
   0xf3, 0xff, 0x90, 0x71, 0xc4, 0xff, 0xc9, 0xb7, 0xd9, 0xff, 0x73, 0x38,
   0x93, 0xff, 0x9d, 0x6e, 0xa6, 0xff, 0xcb, 0xae, 0xc9, 0xff, 0xd5, 0xbd,
   0xce, 0xff, 0xd5, 0xb7, 0xc2, 0xff, 0xdd, 0xc5, 0xcc, 0xff, 0xb1, 0x6f,
   0x7f, 0xff, 0x9a, 0x41, 0x57, 0xff, 0xee, 0xe5, 0xe8, 0xff, 0x9d, 0x46,
   0x5b, 0xff, 0xb4, 0x71, 0x81, 0xff, 0xda, 0xc1, 0xc8, 0xff, 0xcc, 0xa5,
   0xb0, 0xff, 0xbf, 0x85, 0x94, 0xff, 0x99, 0x41, 0x57, 0xff, 0xc0, 0x8b,
   0x9a, 0xff, 0xd6, 0xaf, 0xb8, 0xff, 0xe3, 0xd2, 0xd6, 0xff, 0xbe, 0x89,
   0x97, 0xff, 0xf2, 0xea, 0xed, 0xff, 0x9d, 0x46, 0x5c, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0xaf, 0x6b, 0x7c, 0xff, 0x8a, 0x81,
   0xf2, 0xff, 0x35, 0x21, 0xdf, 0xff, 0xb4, 0xad, 0xec, 0xff, 0xb1, 0xa3,
   0xe7, 0xff, 0x96, 0x82, 0xda, 0xff, 0xe9, 0xe5, 0xf1, 0xff, 0x8a, 0x6b,
   0xc3, 0xff, 0xdf, 0xd4, 0xe7, 0xff, 0x9d, 0x76, 0xb3, 0xff, 0x91, 0x5d,
   0x9d, 0xff, 0xb2, 0x87, 0xaf, 0xff, 0xc0, 0x9c, 0xb5, 0xff, 0xd9, 0xbf,
   0xc7, 0xff, 0xde, 0xc4, 0xcc, 0xff, 0xb3, 0x6e, 0x7f, 0xff, 0x9a, 0x41,
   0x57, 0xff, 0xed, 0xe3, 0xe7, 0xff, 0xc1, 0x8f, 0x9c, 0xff, 0xcf, 0xa8,
   0xb2, 0xff, 0xd9, 0xbf, 0xc5, 0xff, 0xc9, 0xa2, 0xab, 0xff, 0xd8, 0xb8,
   0xc0, 0xff, 0xad, 0x67, 0x78, 0xff, 0xb4, 0x75, 0x85, 0xff, 0xc1, 0x8c,
   0x99, 0xff, 0xd8, 0xba, 0xc2, 0xff, 0xc3, 0x92, 0x9e, 0xff, 0xf1, 0xe9,
   0xec, 0xff, 0x9d, 0x46, 0x5c, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0xa6, 0x59, 0x6c, 0xff, 0xb6, 0xb2, 0xf5, 0xff, 0x30, 0x20,
   0xe4, 0xff, 0x63, 0x53, 0xe1, 0xff, 0xb3, 0xa8, 0xeb, 0xff, 0xb6, 0xaa,
   0xe8, 0xff, 0x96, 0x80, 0xd5, 0xff, 0x5f, 0x38, 0xb4, 0xff, 0xb4, 0x9f,
   0xd3, 0xff, 0xb4, 0x99, 0xc8, 0xff, 0xa0, 0x74, 0xae, 0xff, 0xcc, 0xb1,
   0xcc, 0xff, 0xcd, 0xb0, 0xc4, 0xff, 0xa5, 0x62, 0x7e, 0xff, 0xbe, 0x86,
   0x94, 0xff, 0xa3, 0x54, 0x68, 0xff, 0x9a, 0x3f, 0x56, 0xff, 0xbe, 0x88,
   0x96, 0xff, 0xd5, 0xb4, 0xbe, 0xff, 0xd4, 0xb3, 0xbd, 0xff, 0xb2, 0x6e,
   0x80, 0xff, 0xa6, 0x58, 0x6c, 0xff, 0xd2, 0xb0, 0xb9, 0xff, 0xba, 0x82,
   0x90, 0xff, 0xc4, 0x96, 0xa2, 0xff, 0xd4, 0xb3, 0xbd, 0xff, 0xcf, 0xa9,
   0xb4, 0xff, 0xa0, 0x4e, 0x63, 0xff, 0xc5, 0x97, 0xa4, 0xff, 0x9a, 0x41,
   0x58, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0xa5, 0x54,
   0x68, 0xff, 0xec, 0xec, 0xf9, 0xff, 0x33, 0x26, 0xe8, 0xff, 0x35, 0x22,
   0xe0, 0xff, 0x3b, 0x24, 0xd8, 0xff, 0x42, 0x28, 0xcf, 0xff, 0x4c, 0x2c,
   0xc6, 0xff, 0x54, 0x30, 0xba, 0xff, 0x5f, 0x33, 0xac, 0xff, 0x69, 0x37,
   0x9d, 0xff, 0x76, 0x39, 0x8e, 0xff, 0x7d, 0x3b, 0x82, 0xff, 0x87, 0x3c,
   0x73, 0xff, 0x91, 0x3e, 0x62, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0xa9, 0x5e, 0x70, 0xff, 0xfe, 0xfe,
   0xfe, 0xff, 0x6d, 0x65, 0xf1, 0xff, 0x2f, 0x1e, 0xe3, 0xff, 0x36, 0x22,
   0xde, 0xff, 0x3c, 0x25, 0xd6, 0xff, 0x44, 0x27, 0xcf, 0xff, 0x4c, 0x2b,
   0xc4, 0xff, 0x59, 0x31, 0xb6, 0xff, 0x64, 0x35, 0xa5, 0xff, 0x70, 0x38,
   0x95, 0xff, 0x7b, 0x3a, 0x86, 0xff, 0x85, 0x3c, 0x77, 0xff, 0x90, 0x3f,
   0x65, 0xff, 0x99, 0x40, 0x58, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0xb5, 0x73, 0x84, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0xc7,
   0xf7, 0xff, 0x2b, 0x1f, 0xe9, 0xff, 0x31, 0x20, 0xe4, 0xff, 0x36, 0x22,
   0xde, 0xff, 0x3d, 0x24, 0xd7, 0xff, 0x43, 0x28, 0xcf, 0xff, 0x4d, 0x2c,
   0xc4, 0xff, 0x5b, 0x31, 0xb3, 0xff, 0x68, 0x35, 0x9f, 0xff, 0x76, 0x39,
   0x8c, 0xff, 0x81, 0x3b, 0x7c, 0xff, 0x8b, 0x3d, 0x6b, 0xff, 0x96, 0x40,
   0x5a, 0xff, 0x99, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x99, 0x40, 0x57, 0xff, 0xc7, 0x97,
   0xa4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfa, 0xfa, 0xff, 0x69, 0x62,
   0xf0, 0xff, 0x2b, 0x1d, 0xe9, 0xff, 0x30, 0x20, 0xe4, 0xff, 0x35, 0x22,
   0xdf, 0xff, 0x39, 0x24, 0xd9, 0xff, 0x3e, 0x25, 0xd4, 0xff, 0x47, 0x28,
   0xcb, 0xff, 0x55, 0x30, 0xb9, 0xff, 0x69, 0x36, 0x9f, 0xff, 0x7a, 0x3a,
   0x88, 0xff, 0x87, 0x3c, 0x73, 0xff, 0x94, 0x3f, 0x5e, 0xff, 0x98, 0x40,
   0x56, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0xe1, 0xc9, 0xd0, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe2, 0xe1, 0xf9, 0xff, 0x37, 0x31,
   0xee, 0xff, 0x2b, 0x1d, 0xea, 0xff, 0x30, 0x1e, 0xe5, 0xff, 0x32, 0x20,
   0xe1, 0xff, 0x36, 0x21, 0xe0, 0xff, 0x39, 0x22, 0xdd, 0xff, 0x3b, 0x23,
   0xda, 0xff, 0x3f, 0x25, 0xd4, 0xff, 0x57, 0x2f, 0xb4, 0xff, 0x7b, 0x3b,
   0x83, 0xff, 0x8e, 0x3e, 0x67, 0xff, 0x98, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0xa3, 0x54,
   0x68, 0xff, 0xfa, 0xf8, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfe, 0xfd, 0xfe, 0xff, 0xbd, 0xbc, 0xf4, 0xff, 0x2e, 0x28,
   0xec, 0xff, 0x2b, 0x1e, 0xeb, 0xff, 0x2c, 0x1d, 0xe9, 0xff, 0x2f, 0x1e,
   0xe7, 0xff, 0x30, 0x1e, 0xe5, 0xff, 0x31, 0x20, 0xe4, 0xff, 0x31, 0x1e,
   0xe5, 0xff, 0x2d, 0x1f, 0xe6, 0xff, 0x3b, 0x22, 0xd7, 0xff, 0x76, 0x37,
   0x8b, 0xff, 0x96, 0x3f, 0x5e, 0xff, 0x9a, 0x40, 0x56, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x99, 0x40, 0x56, 0xff, 0xcc, 0xa5, 0xaf, 0xff, 0xfd, 0xfd,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfd, 0xfc, 0xfc, 0xff, 0xb8, 0xb8, 0xf5, 0xff, 0x35, 0x30,
   0xec, 0xff, 0x29, 0x22, 0xeb, 0xff, 0x2b, 0x1f, 0xec, 0xff, 0x29, 0x1d,
   0xea, 0xff, 0x2b, 0x1d, 0xec, 0xff, 0x2a, 0x1c, 0xeb, 0xff, 0x2a, 0x1e,
   0xec, 0xff, 0x2a, 0x21, 0xee, 0xff, 0x2b, 0x26, 0xe7, 0xff, 0x66, 0x36,
   0x9e, 0xff, 0x99, 0x40, 0x5a, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x99, 0x40, 0x57, 0xff, 0xa8, 0x5b,
   0x6f, 0xff, 0xf8, 0xf4, 0xf6, 0xff, 0xfd, 0xfd, 0xfd, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfe, 0xfc, 0xfd, 0xff, 0xd3, 0xd4, 0xf9, 0xff, 0x57, 0x58,
   0xf1, 0xff, 0x28, 0x27, 0xed, 0xff, 0x27, 0x25, 0xeb, 0xff, 0x2a, 0x24,
   0xed, 0xff, 0x28, 0x25, 0xed, 0xff, 0x29, 0x27, 0xed, 0xff, 0x2a, 0x2a,
   0xee, 0xff, 0x2a, 0x2d, 0xef, 0xff, 0x2a, 0x36, 0xed, 0xff, 0x55, 0x3f,
   0xb1, 0xff, 0x96, 0x40, 0x5b, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9b, 0x45, 0x5b, 0xff, 0xe5, 0xd1, 0xd6, 0xff, 0xfe, 0xfe,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff,
   0xff, 0xff, 0xfd, 0xfe, 0xfd, 0xff, 0xfa, 0xfc, 0xfd, 0xff, 0xbb, 0xbf,
   0xf6, 0xff, 0x70, 0x77, 0xf1, 0xff, 0x3f, 0x47, 0xef, 0xff, 0x2b, 0x35,
   0xed, 0xff, 0x29, 0x33, 0xee, 0xff, 0x2f, 0x3d, 0xee, 0xff, 0x47, 0x56,
   0xf0, 0xff, 0x73, 0x85, 0xf3, 0xff, 0xb3, 0xbf, 0xf6, 0xff, 0xd8, 0xbf,
   0xcc, 0xff, 0x9f, 0x4b, 0x60, 0xff, 0x99, 0x3f, 0x56, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x40,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9d, 0x47, 0x5b, 0xff, 0xdb, 0xc0,
   0xc7, 0xff, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xfb, 0xfd, 0xfc, 0xff, 0xfd, 0xfd,
   0xfd, 0xff, 0xfa, 0xfb, 0xfd, 0xff, 0xf1, 0xf3, 0xfc, 0xff, 0xf0, 0xf1,
   0xfc, 0xff, 0xf2, 0xf5, 0xfd, 0xff, 0xf9, 0xfc, 0xfd, 0xff, 0xfd, 0xfd,
   0xfc, 0xff, 0xfc, 0xfd, 0xfc, 0xff, 0xfc, 0xfd, 0xfd, 0xff, 0xea, 0xdc,
   0xe0, 0xff, 0xad, 0x65, 0x78, 0xff, 0x9a, 0x41, 0x57, 0xff, 0x99, 0x3f,
   0x56, 0xff, 0x99, 0x40, 0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x9a, 0x3f,
   0x57, 0xff, 0x9a, 0x40, 0x57, 0xff, 0x99, 0x40, 0x56, 0xff, 0xab, 0x5f,
   0x72, 0xff, 0xe6, 0xd4, 0xd8, 0xff, 0xfc, 0xfe, 0xfe, 0xff, 0xfe, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xf8,
   0xf9, 0xff, 0xd9, 0xbf, 0xc7, 0xff, 0xb9, 0x7e, 0x8d, 0xff, 0xa4, 0x56,
   0x6b, 0xff, 0x9c, 0x47, 0x5d, 0xff, 0xa4, 0x54, 0x68, 0xff, 0xb6, 0x79,
   0x88, 0xff, 0xd7, 0xb8, 0xc0, 0xff, 0xf5, 0xf5, 0xf7, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00,
}

/*
HintNone = C.WEBVIEW_HINT_NONE
HintFixed = C.WEBVIEW_HINT_FIXED
HintMin = C.WEBVIEW_HINT_MIN
HintMax = C.WEBVIEW_HINT_MAX
*/

var wvinst bool = false

func myBrowser(url string) {
	log.Printf("navigate: %s", url)
   w := webview.New(true)
   if w == nil {
      log.Printf("webview open error")
   } 
   w.Destroy()

   w.SetTitle("hancom (smart-receipt)")
   w.SetSize(800, 600, webview.HintMax)
   w.Navigate(url)
   w.Run()
}

func GetOutboundIP() net.IP {
   conn, err := net.Dial("udp", "8.8.8.8:80")
   if err != nil {
      log.Fatal(err)
   }
   defer conn.Close()
   return conn.LocalAddr().(*net.UDPAddr).IP
}

func GetOutboundMac(currentIP string) string {
   var currentNetworkHardwareName string
   interfaces, _ := net.Interfaces()
   for _, interf := range interfaces {
      if addrs, err := interf.Addrs(); err == nil {
         for _, addr := range addrs {
            if strings.Contains(addr.String(), currentIP) {
               currentNetworkHardwareName = interf.Name
            }
         }
      }
   }
   netInterface, err := net.InterfaceByName(currentNetworkHardwareName)
   if err != nil {
      log.Printf("[agent] Interface error: %s", err)
   }
   return netInterface.HardwareAddr.String()
}

type License struct {
   Mac string
   Rcn string
   Ver string
}

func getConfig() bool {
   err := godotenv.Load("c:\\hancom\\.env")
   if err != nil {
      log.Fatal("Error loading .env file")
   }
   httpHost  = os.Getenv("SERVER")
   wsHost    = os.Getenv("WS")
   rcnNum    = os.Getenv("RCN")
   Printer   = os.Getenv("PRINTER")
   Port1     = os.Getenv("PORT1")
   Port2     = os.Getenv("PORT2")
   heartBeat = os.Getenv("HEARTBEAT")
   ipAddr    = GetOutboundIP().String()
   macAddr   = GetOutboundMac(ipAddr)
   
   //b, _ := json.Marshal(License {mac: macAddr, Timestamp: time.Now().Unix()})
   d := License{Mac: macAddr, Rcn: rcnNum, Ver: version}
   b, _ := json.Marshal(d)
   resp, err := http.Post(httpHost+"/pos/sign-in/", "application/json", bytes.NewBuffer(b))
   if err != nil {
      log.Printf("[agent] getConfig error: ", err)
   }
   if resp.StatusCode == http.StatusOK {
      s, err := ioutil.ReadAll(resp.Body)
      if err == nil {
         var result map[string]interface{}
         json.Unmarshal([]byte(s), &result)
         if result["code"].(float64) != 200 {
            myBrowser(httpHost + "/pos/sign-up/" + macAddr)
            return false
         }
         license = result["license"].(string)
         log.Printf("[agent] getConfig license: %s", license)
         return true
      }
   }
   return false
}

////////////////////////////////////////////////////////////////////////////////////////////////////

type JsonData struct {
   Data      string
   Timestamp int64
}

func Open(device string) io.ReadWriteCloser {
   options := serial.OpenOptions{
      PortName:        device,
      BaudRate:        19200,
      DataBits:        8,
      StopBits:        1,
      MinimumReadSize: 4,
   }
   port, err := serial.Open(options)
   if err != nil {
      log.Printf("[agent] serial.Open: %v", err)
      return nil
   }
   return port
}

func Run(in io.ReadWriteCloser, out io.ReadWriteCloser, wg *sync.WaitGroup, ctx context.Context) {
   defer wg.Done()

   go func() {
      for {
         buf := make([]byte, 4096)
         n, err := in.Read(buf)

         if err != nil {
            if err != io.EOF {
               log.Fatal("[err] reading from serial port: ", err)
            }
         } else {
            buf = buf[:n]
            if n > 0 {
               b, _ := json.Marshal(JsonData{Data: hex.EncodeToString(buf), Timestamp: time.Now().Unix()})
               resp, err := http.Post(httpHost+"/receipt/probe/"+license, "application/json", bytes.NewBuffer(b))
               //resp, err := http.Post(httpHost + "/receipt/probe/1234", "application/json", bytes.NewBuffer(b))
               if err != nil {
                  log.Printf("[run] http post error: ", err)
               } else {
                  defer resp.Body.Close()
                  if resp.StatusCode == http.StatusOK {
                     s, err := ioutil.ReadAll(resp.Body)
                     if err == nil {
                        b, _ = hex.DecodeString(string(s))
                        log.Printf("[run] http response error: %s", b)
                        out.Write(b)
                     }
                  }
               }
            }
            //out.Write(buf)
         }
      }
   }()

   forever := make(chan struct{})
   for {
      select {
      case <-ctx.Done(): // if cancel() execute
         log.Printf("'Run' goroutine termination.")
         forever <- struct{}{}
         return
      }
      time.Sleep(500 * time.Millisecond)
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
var title = "Hancom App"

func downloadFile(filepath string, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

func onReady() {
   systray.SetTemplateIcon(Icon, Icon)
   systray.SetTitle(title)
   systray.SetTooltip(title)
   mQRcode  := systray.AddMenuItem("QR코드 리더기 연결하기", "")
   mSetting := systray.AddMenuItem("설정보기", "")
   systray.AddSeparator()
   mQuit    := systray.AddMenuItem("프로그램 종료", "")
   systray.AddSeparator()
   mUpdate  := systray.AddMenuItem("최신 업데이트 확인", "")

   go func() {
      <-mQuit.ClickedCh
      systray.Quit()
   }()

   for {
      select {
      case <-mSetting.ClickedCh:
         go myBrowser(httpHost + "/pos/registered/" + license)
      case <-mQRcode.ClickedCh:
		   go myBrowser(httpHost + "/pos/pairing/" + license)
      case <-mUpdate.ClickedCh:
		   go myBrowser(httpHost + "/pos/update-check/" + license)
      }
   }
}

var quit bool = false

func mySystray(wg *sync.WaitGroup, ctx context.Context) {
   defer wg.Done()

   go func() {
      onExit := func() { quit = true }
      systray.Run(onReady, onExit)
   }()
   forever := make(chan struct{})
   for {
      select {
      case <-ctx.Done(): // if cancel() execute
         log.Printf("'Systray' goroutine termination.")
         forever <- struct{}{}
         return
      }
      time.Sleep(500 * time.Millisecond)
   }
}

type WsData struct {
   License   string
   Command   string
   Message   string
   Timestamp int64
}

func connectWS() *websocket.Conn {
   for {
      u := url.URL{Scheme: "ws", Host: wsHost, Path: "/"}
      c, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
      if err != nil {
         log.Printf("[ws] websocket dial error:", err)
         time.Sleep(1)
         continue
      }
      log.Printf("[ws] connected to %s", u.String())
      wsConnected = 1
      b, _ := json.Marshal(WsData{License: license, Command: "Join", Message: "Hi", Timestamp: time.Now().Unix()})
      c.WriteMessage(websocket.TextMessage, b /*[]byte(b)*/)
      return c
   }
}

func myWS(wg *sync.WaitGroup, ctx context.Context) {
   defer wg.Done()

   c := connectWS()
   defer c.Close()

   go func() {
      for {
         if wsConnected == 0 {
            time.Sleep(1)
            c = connectWS()
         }
         _, message, err := c.ReadMessage()
         if err != nil {
            log.Println("read:", err)
            wsConnected = 0
            continue
         }
         log.Printf("[ws] received message: %s", message)

         var result map[string]interface{}
         json.Unmarshal([]byte(message), &result)
         if result["Command"].(string) == "Callback" {
            go myBrowser(result["Message"].(string))
         }
      }
   }()
   forever := make(chan struct{})
   for {
      select {
      case <-ctx.Done(): // if cancel() execute
         log.Printf("'WS' goroutine termination.")
         forever <- struct{}{}
         return
      }
      time.Sleep(500 * time.Millisecond)
   }
}

func hbTask () {
  d := License{Mac: macAddr, Rcn: rcnNum, Ver: version}
  b, _ := json.Marshal(d)
  resp, err := http.Post(httpHost+"/pos/heartbeat/", "application/json", bytes.NewBuffer(b))
  if err != nil {
	 log.Printf("[agent] heartBeat error: ", err)
  } else {
	defer resp.Body.Close()
  }
}

func getLatestVersion (macAddr string, rcnNum string) {
  d := License{Mac: macAddr, Rcn: rcnNum}
  b, _ := json.Marshal(d)
  resp, err := http.Post(httpHost+"/pos/latest/version", "application/json", bytes.NewBuffer(b))

  if err != nil {
	log.Printf("[agent] heartBeat error: ", err)
  } else {
	defer resp.Body.Close()

	log.Printf("[agent] status code: %d", resp.StatusCode)
	if resp.StatusCode == http.StatusOK {
		s, err := ioutil.ReadAll(resp.Body)
		if err == nil {
		  var result map[string]interface{}

		  json.Unmarshal([]byte(s), &result)
		  log.Printf("[agent] Body: %s", result) 

		  Update := result["fupdate"].(string)
		  Version := result["version"].(string)
		  log.Printf("[agent] Update: %s, Version: %s %s", Update, Version, version)
		  if (Update == string('Y') && Version != version) {
			url := result["name"].(string)
			downloadFile ("c:\\hancom\\setup.exe", httpHost + url)

		    os.Chdir("c:\\hancom")
		    exec.Command("setup.exe").Output()
		  }
		}
	}
  }
}

func init() {
}

func doRun () {
   /////////////////////////////////////////////////////////////////////////
   LOG_FILE := "smart-receipt.log"
   fp, err := os.OpenFile(LOG_FILE, os.O_APPEND|os.O_RDWR|os.O_CREATE, 0644)
   if err != nil {
      log.Panic(err)
   }
   defer fp.Close()
   multiWriter := io.MultiWriter(fp, os.Stdout)
   log.SetOutput(multiWriter)

   log.Printf("")
   log.Printf("                     com0com")
   log.Printf("+-------+       +---------------+     +------+       +------+")
   log.Printf("|  POS  | <---> | %4s --- %4s |     | %4s | <---> | PRNT |", Port2, Port1, Printer)
   log.Printf("+-------+       +---------------+     +------+       +------+")
   log.Printf("                             |           |")
   log.Printf("                             +-- agent --+")
   log.Printf("")

   in := Open(Port1)
   if in == nil {
      return
   }
   out := Open(Printer)
   if out == nil {
      return
   }

   /////////////////////////////////////////////////////////////////////////
   wg := sync.WaitGroup{}
   ctx, cancel := context.WithCancel(context.Background())

   wg.Add(4)
   go myWS(&wg, ctx)
   go mySystray(&wg, ctx)
   go Run(in, out, &wg, ctx)
   go Run(out, in, &wg, ctx)
   
   hbtimer, _ := strconv.ParseInt(heartBeat, 10, 32)
   gocron.Every(uint64(hbtimer)).Second().Do(hbTask)
   <- gocron.Start()

   for {
      if quit == true {
         cancel()
         return
      }
      time.Sleep(500 * time.Millisecond)
   }
   //wg.Wait()
}



func main() {
  t := time.Now()
  formatted := fmt.Sprintf("%d-%02d-%02d %02d:%02d:%02d",
    t.Year(), t.Month(), t.Day(),
    t.Hour(), t.Minute(), t.Second())

  if getConfig() == false {
	log.Printf("[agent] Please, check your POS configuration.")
	return
  }

  getLatestVersion (macAddr, rcnNum)

  log.Printf("#######################################")
  log.Printf("#")
  log.Printf("# HANCOM SMART RECEIPT AGENT")
  log.Printf("# --------------------------")
  log.Printf("# Version: %s", version  )
  log.Printf("# Build:   %s", build    )
  log.Printf("# Time   : %s", formatted)
  log.Printf("#")
  log.Printf("#######################################")
  log.Printf("")
  doRun ()
}